<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_toaster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates player variables
grav = .6;
hsp = 0;
vsp = 0;
jumpSpeed = 7;
moveSpeed = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Toast
if(mouse_check_button_pressed(mb_left)) {
    time = current_time;
}
if(mouse_check_button_released(mb_left)) {
    newTime = current_time - time;
    if(newTime &gt; 4000) {
        burntToast = instance_create(x, y, obj_burntToast);
        burntToast.direction = point_direction(x, y, mouse_x, mouse_y);
        burntToast.image_angle = point_direction(x, y, mouse_x, mouse_y);
        burntToast.speed = 0;
    }
    else if(newTime &gt; 3500) {
        flameToast = instance_create(x, y, obj_flameToast);
        flameToast.direction = point_direction(x, y, mouse_x, mouse_y);
        flameToast.image_angle = point_direction(x, y, mouse_x, mouse_y);
        flameToast.speed = 15;
        angle = arctan( (y - mouse_y) / (x - mouse_x) );
        vsp = -flameToast.speed * dcos( angle );
        hsp = -flameToast.speed * dsin( angle );
    }
    else if(newTime &gt; 2000) {
        toast = instance_create(x, y, obj_toast);
        toast.direction = point_direction(x, y, mouse_x, mouse_y);
        toast.image_angle = point_direction(x, y, mouse_x, mouse_y);
        toast.speed = 10;
        angle = arctan( (y - mouse_y) / (x - mouse_x) );
        vsp = -toast.speed * dcos( angle );
        hsp = -toast.speed * dsin( angle );
    }
    else if(newTime &lt; 2000) {
        flopToast = instance_create(x, y, obj_flopToast);
        flopToast.direction = point_direction(x, y, mouse_x, mouse_y);
        flopToast.image_angle = point_direction(x, y, mouse_x, mouse_y);
        flopToast.speed = 10;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Player Movement
//Get the player's movement input
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));
key_jump = keyboard_check_pressed(vk_space);

//React to inputs
move = key_left + key_right;
hsp = move * moveSpeed;
if(vsp &lt; 10) {
    vsp += grav;
}

//Player can only jump while on a wall
if(place_meeting(x, y + 1, obj_wall)) {
    vsp = key_jump * -jumpSpeed;
}
//If there is a wall/block to the right/left and player is moving in that direction,
//move as far in the direction of the wall as possible.
if(place_meeting(x + hsp, y, obj_wall)) {
    while(!place_meeting(x + sign(hsp), y, obj_wall)) {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//if there is a wall beneath/above player and player is moving in that direction,
//move as far in the direction of the wall as possible.
if(place_meeting(x, y + vsp, obj_wall)) {
    while(!place_meeting(x, y + sign(vsp), obj_wall)) {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
